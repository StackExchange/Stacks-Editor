@import (reference) "@stackoverflow/stacks/lib/css/exports/mixins";
@import (reference) "@stackoverflow/stacks/lib/css/exports/constants-type";
@import (reference) "@stackoverflow/stacks/lib/css/exports/constants-colors";
@import (reference) "@stackoverflow/stacks/lib/css/exports/constants-helpers";

/* Applies if the device would need a virtual keyboard */
/* has no hover (touchscreens) or has only coarse input (non-stylus touchscreens / controllers) */
@media (hover: none), (pointer: coarse) {
    .vk\:d-inline-flex {
        display: inline-flex !important;
    }
}

// TODO PR opened for upstream StackExchange/Stacks#1040 - use .is-readonly instead
.s-input__readonly {
    border-color: var(--black-075);
    background-color: var(--black-050);
    color: var(--black-200);
    cursor: not-allowed;
}

// TODO UPSTREAM
.s-btn-group__radio {
    display: flex;

    // TODO altered from upstream .s-btn-group>.s-btn
    .s-btn {
        &:not(:last-of-type) {
            margin-right: -1px;
        }

        &:not(:first-of-type):not(:last-of-type) {
            border-radius: 0;
        }

        &:first-of-type:not(:only-of-type) {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        &:last-of-type:not(:only-of-type) {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    }

    input[type="radio"],
    input[type="checkbox"] {
        //.v-visible-sr;
        display: none;

        &:checked + label.s-btn {
            // TODO extends .s-btn.is-selected and .s-btn-group>.s-btn.is-selected
            z-index: var(--zi-selected);
            color: var(--theme-button-selected-color);
            background: var(--theme-button-selected-background-color);
            box-shadow: none;
        }

        &:focus + label.s-btn {
            box-shadow: 0 0 0 var(--su-static4) var(--focus-ring);
        }
    }

    .s-editor-btn {
        --editor-button-border-color: currentColor;
    }
}

.s-editor-shadow {
    transform-style: preserve-3d;

    &:after {
        content: "";
        position: absolute;
        transform: translateZ(-1px);
        top: -112px;
        left: 0;
        right: 0;
        height: 62px;
        background: radial-gradient(
            50% 50% at 50% 45%,
            rgba(0, 0, 0, 0.8) -200%,
            rgba(0, 0, 0, 0) 115%
        );
        opacity: 0;
        pointer-events: none;

        // Transition out
        transition: top 1s ease, opacity 1.5s ease; // Transition out

        // HACK: Remove the transition out for Safari, since the rubberband effect makes that shadow look really bad
        // https://browserstrangeness.bitbucket.io/css_hacks.html#safari
        @media not all and (min-resolution: 0.001dpcm) {
            @supports (-webkit-appearance: none) and (stroke-color: transparent) {
                transition: none;
            }
        }
    }

    &.is-stuck {
        &:after {
            top: 0;
            opacity: 1;
            transition: top 0.2s ease, opacity 0.1s ease; // Transition in
        }
    }
}

.s-editor-btn {
    --theme-button-color: var(--fc-medium);
    --theme-button-hover-color: var(--fc-medium);
    --theme-button-hover-background-color: var(--black-050);
    --theme-button-active-background-color: var(--theme-secondary-100);
    --theme-button-selected-color: var(--theme-secondary-900);
    --theme-button-selected-background-color: var(--theme-secondary-100);

    // TODO when upstream adopts the ability to change the border color on default buttons, remove this
    --editor-button-border-color: transparent;

    padding: var(--su2);
    border-color: var(--editor-button-border-color);

    &:active,
    &.is-selected {
        --editor-button-border-color: currentColor;
    }

    &:focus {
        box-shadow: 0 0 0 var(--su-static4) var(--focus-ring-muted);
    }

    &.is-disabled {
        opacity: 0.5;
    }

    &.s-btn__dropdown {
        padding-right: var(--su12);

        &::after {
            right: var(--su2);
        }
    }
}

&.s-editor--dropdown-item {
    padding: var(--su4) var(--su12);

    &:hover {
        background-color: var(--black-050);
    }

    &.is-selected {
        font-weight: normal;
        background-color: var(--theme-secondary-100);
        color: var(--theme-secondary-900);
    }

    &.is-disabled {
        opacity: 0.5;
    }
}

.s-editor-resizable {
    max-height: calc(var(--s-step) * 6); // hmx6
    resize: vertical;

    // if the user manually resizes (via css resize handle), remove the max-height restriction
    // we can detect user resize since css `resize` adds a `height` inline style
    &[style*="height"] {
        max-height: none;
    }
}

// TODO PR opened for upstream StackExchange/Stacks#1040
.is-loading {
    position: relative;
    padding-left: 2.2em;

    &:before {
        content: "";
        position: absolute;
        opacity: 0.3;
        left: 0.6em;
        top: calc(50% - 0.6em);
        width: 1.23076923em;
        height: 1.23076923em;
        border-width: 2px;
        border-style: solid;
        border-color: currentColor;
        border-radius: var(--br-circle);
    }

    &:after {
        content: "";
        position: absolute;
        left: 0.6em;
        top: calc(50% - 0.6em);
        width: 1.23076923em;
        height: 1.23076923em;
        border-width: 2px;
        border-style: solid;
        border-color: transparent;
        border-left-color: currentColor;
        border-radius: var(--br-circle);
        animation: s-spinner-rotate 0.9s infinite
            cubic-bezier(0.5, 0.1, 0.5, 0.9);
        // see _stacks-spinner.less for an explanation of the following two
        filter: invert(0); // (*)
        transform-origin: 50% 50% 1px; // (*)
    }
}

// EDITOR ONLY STYLE OVERRIDES

.ProseMirror {
    & {
        // allow the editable area to fill the parent
        min-height: inherit;

        // required for proper rendering
        word-wrap: break-word;
        white-space: pre-wrap; // fallback if break-spaces is not supported
        white-space: break-spaces;
        font-variant-ligatures: none;
    }

    & [data-placeholder] {
        position: relative;

        // ensures markdown placeholder wraps expectedly
        &.s-code-block.markdown {
            overflow: visible;
        }

        &::before {
            color: var(--fc-light);
            position: absolute;
            content: attr(data-placeholder);
            pointer-events: none;
        }

        .s-input__readonly &::before {
            color: inherit;
        }
    }

    // taken from prosemirror.css for compatibility
    .ProseMirror-hideselection *::selection {
        background: transparent;
    }
    .ProseMirror-hideselection {
        caret-color: transparent;
    }

    .ProseMirror-selectednode {
        box-shadow: 0 0 0 4px var(--focus-ring);
    }

    // reset whitespace to normal inside externally sourced widgets
    .ProseMirror-widget {
        white-space: normal;
        word-wrap: normal;

        // can manually place on the contentDOM element of NodeViews to reset .Prosemirror-widget
        .ProseMirror-contentdom {
            word-wrap: break-word;
            white-space: pre-wrap; // fallback if break-spaces is not supported
            white-space: break-spaces;
        }
    }

    img {
        max-width: 100%;
    }

    &.s-markdown-preview {
        img {
            pointer-events: none;
        }
    }
    // set the children of spoilers visible so we can edit them
    &.s-prose .spoiler * {
        visibility: visible;
    }

    // Our editor often wraps things in their own divs. These wrappers should have the proper spacing below them
    &.s-prose div {
        margin-bottom: var(--s-prose-spacing);

        &:last-child,
        &:only-child {
            margin-bottom: 0;
        }
    }

    &.s-prose ol,
    &.s-prose ul {
        div {
            margin-bottom: var(--s-prose-spacing-condensed);
        }
    }

    // ensure proper line breaks in markdown-mode where everything is one big code block
    pre,
    code {
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    // and reset any properties on the root pre/code that might be explicitly set elsewhere
    > pre,
    > code {
        margin: 0;
        padding: 0;
        width: auto;
        max-height: unset;
        background-color: inherit;
        border-radius: 0;
    }
}

// overrides for only when the editor is writable (not readonly)
.ProseMirror[contenteditable="true"] {
    // only affect a tags that are within nodes (avoids selecting links inside link previews)
    p > a[href] {
        // links are not "clickable", but "editable",
        // so inherit the cursor from the editor
        cursor: inherit;
    }
}

// overrides for only when the editor is readonly
.ProseMirror[contenteditable="false"]:not(.s-markdown-preview) {
    // dim the content on pre/code since their text color is unaffected
    pre,
    code {
        opacity: 80%;
    }

    // make sure widgets all conform as well
    .ProseMirror-widget,
    .ProseMirror-widget * {
        background-color: inherit;
    }
}
