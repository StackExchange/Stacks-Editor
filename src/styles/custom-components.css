/* Applies if the device would need a virtual keyboard */
/* has no hover (touchscreens) or has only coarse input (non-stylus touchscreens / controllers) */
@media (hover: none), (pointer: coarse) {
    .vk\:d-inline-flex {
        display: inline-flex !important;
    }
}

/* TODO UPSTREAM */
.s-btn-group__radio {
    display: flex;
}

/* TODO altered from upstream .s-btn-group>.s-btn */
.s-btn-group__radio .s-btn:not(:last-of-type) {
    margin-right: -1px;
}

.s-btn-group__radio .s-btn:not(:first-of-type):not(:last-of-type) {
    border-radius: 0;
}

.s-btn-group__radio .s-btn:first-of-type:not(:only-of-type) {
    border-bottom-right-radius: 0;
    border-top-right-radius: 0;
}

.s-btn-group__radio .s-btn:last-of-type:not(:only-of-type) {
    border-bottom-left-radius: 0;
    border-top-left-radius: 0;
}

.s-btn-group__radio input[type="checkbox"],
.s-btn-group__radio input[type="radio"] {
    display: none;
}

/* TODO extends .s-btn.is-selected and .s-btn-group>.s-btn.is-selected */
:is(.s-btn-group__radio input[type="checkbox"]):checked + label.s-btn,
:is(.s-btn-group__radio input[type="radio"]):checked + label.s-btn {
    background: var(--theme-button-selected-background-color);
    box-shadow: none;
    color: var(--theme-button-selected-color);
    z-index: var(--zi-selected);
}

:is(.s-btn-group__radio input[type="checkbox"]):focus + label.s-btn,
:is(.s-btn-group__radio input[type="radio"]):focus + label.s-btn {
    box-shadow: 0 0 0 var(--su-static4) var(--focus-ring);
}

.s-btn-group__radio .s-editor-btn {
    --editor-button-border-color: currentColor;
}

.s-editor-shadow {
    transform-style: preserve-3d;
}

.s-editor-shadow:after {
    background: radial-gradient(
        50% 50% at 50% 45%,
        rgba(0, 0, 0, 0.8) -200%,
        transparent 115%
    );
    content: "";
    height: 62px;
    left: 0;
    opacity: 0;
    pointer-events: none;
    position: absolute;
    right: 0;
    top: -112px;
    transform: translateZ(-1px);
    /* Transition out */
    transition: top 1s ease, opacity 1.5s ease;
}

/* HACK: Remove the transition out for Safari, since the rubberband effect makes that shadow look really bad */
/* https://browserstrangeness.bitbucket.io/css_hacks.html#safari */
@media not all and (min-resolution: 0.001dpcm) {
    @supports (-webkit-appearance: none) and (stroke-color: transparent) {
        .s-editor-shadow:after {
            transition: none;
        }
    }
}

.s-editor-shadow.is-stuck:after {
    opacity: 1;
    top: 0;
    transition: top 0.2s ease, opacity 0.1s ease;
}

.s-editor-btn {
    --theme-button-color: var(--fc-medium);
    --theme-button-hover-color: var(--fc-medium);
    --theme-button-hover-background-color: var(--black-050);
    --theme-button-active-background-color: var(--theme-secondary-100);
    --theme-button-selected-color: var(--theme-secondary-900);
    --theme-button-selected-background-color: var(--theme-secondary-100);
    /* TODO when upstream adopts the ability to change the border color on default buttons, remove this */
    --editor-button-border-color: transparent;
    border-color: var(--editor-button-border-color);
    padding: var(--su2);
}

.s-editor-btn.is-selected,
.s-editor-btn:active {
    --editor-button-border-color: currentColor;
}

.s-editor-btn:focus {
    box-shadow: 0 0 0 var(--su-static4) var(--focus-ring-muted);
}

.s-editor-btn.is-disabled {
    opacity: 0.5;
}

.s-editor-btn.s-btn__dropdown {
    padding-right: var(--su12);
}

.s-editor-btn.s-btn__dropdown:after {
    right: var(--su2);
}

.s-editor--dropdown-item {
    padding: var(--su4) var(--su12);
}

.s-editor--dropdown-item:hover {
    background-color: var(--black-050);
}

.s-editor--dropdown-item.is-selected {
    background-color: var(--theme-secondary-100);
    color: var(--theme-secondary-900);
    font-weight: 400;
}

.s-editor--dropdown-item.is-disabled {
    opacity: 0.5;
}

.s-editor-resizable {
    max-height: calc(var(--s-step) * 6);
    resize: vertical;
}

/* if the user manually resizes (via css resize handle), remove the max-height restriction
 * we can detect user resize since css `resize` adds a `height` inline style
 */
.s-editor-resizable[style*="height"] {
    max-height: none;
}

/* EDITOR ONLY STYLE OVERRIDES */

.ProseMirror {
    /* allow the editable area to fill the parent */
    min-height: inherit;
    /* required for proper rendering */
    word-wrap: break-word;
    font-variant-ligatures: none;
    white-space: pre-wrap;
    white-space: break-spaces;
}

.ProseMirror [data-placeholder] {
    position: relative;
}

/* ensures markdown placeholder wraps expectedly */
.ProseMirror .s-code-block.markdown[data-placeholder] {
    overflow: visible;
}

.ProseMirror [data-placeholder]:before {
    color: var(--fc-light);
    content: attr(data-placeholder);
    pointer-events: none;
    position: absolute;
}

[readonly] :is(.ProseMirror [data-placeholder]):before {
    color: inherit;
}

/* taken from prosemirror.css for compatibility */
.ProseMirror .ProseMirror-hideselection ::selection {
    background: transparent;
}

.ProseMirror .ProseMirror-hideselection {
    caret-color: transparent;
}

.ProseMirror .ProseMirror-selectednode {
    box-shadow: 0 0 0 4px var(--focus-ring);
}

/* reset whitespace to normal inside externally sourced widgets */
.ProseMirror .ProseMirror-widget {
    word-wrap: normal;
    white-space: normal;
}

/* can manually place on the contentDOM element of NodeViews to reset .Prosemirror-widget */
.ProseMirror .ProseMirror-widget .ProseMirror-contentdom {
    word-wrap: break-word;
    white-space: pre-wrap; /* fallback if break-spaces is not supported */
    white-space: break-spaces;
}

.ProseMirror img {
    max-width: 100%;
}

.ProseMirror.s-markdown-preview img {
    pointer-events: none;
}

/* set the children of spoilers visible so we can edit them */
.ProseMirror.s-prose .spoiler * {
    visibility: visible;
}

/* Our editor often wraps things in their own divs. These wrappers should have the proper spacing below them */
.ProseMirror.s-prose div {
    margin-bottom: var(--s-prose-spacing);
}

.ProseMirror.s-prose div:last-child,
.ProseMirror.s-prose div:only-child {
    margin-bottom: 0;
}

.ProseMirror.s-prose ol div,
.ProseMirror.s-prose ul div {
    margin-bottom: var(--s-prose-spacing-condensed);
}

/* ensure proper line breaks in markdown-mode where everything is one big code block */
.ProseMirror code,
.ProseMirror pre {
    word-wrap: break-word;
    white-space: pre-wrap;
}

/* and reset any properties on the root pre/code that might be explicitly set elsewhere */
.ProseMirror > code,
.ProseMirror > pre {
    background-color: inherit;
    border-radius: 0;
    margin: 0;
    max-height: unset;
    padding: 0;
    width: auto;
}

/* overrides for only when the editor is writable (not readonly) */
/* only affect a tags that are within nodes (avoids selecting links inside link previews) */
.ProseMirror[contenteditable="true"] p > a[href] {
    /* links are not "clickable", but "editable", */
    /* so inherit the cursor from the editor */
    cursor: inherit;
}

/* overrides for only when the editor is readonly */

/* dim the content on pre/code since their text color is unaffected */
.ProseMirror[contenteditable="false"]:not(.s-markdown-preview) code,
.ProseMirror[contenteditable="false"]:not(.s-markdown-preview) pre {
    opacity: 80%;
}

/* make sure widgets all conform as well */
.ProseMirror[contenteditable="false"]:not(.s-markdown-preview)
    .ProseMirror-widget,
.ProseMirror[contenteditable="false"]:not(.s-markdown-preview)
    .ProseMirror-widget
    * {
    background-color: inherit;
}
